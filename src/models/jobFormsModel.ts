import mongoose, { Schema } from "mongoose";

export interface IJobForm {
    id?: string,
    job: string,
    paidMediaBrief: {
        email: string,
        brandName: string,
        brandWebsite: string,
        companyBackground: string,
        brandValues: string,
        brandPropositionToCustomers: string,
        brandGoals: string,
        paidMediaGoals: string,
        toneOfVoice: string,
        customerValue: string,
        audienceIdentity: string,
        audienceAge: Number,
        ineterestsAndHobbies: string,
        audienceTargeting: [string],
        informationConsumption: string,
        publicIdentity: string,
        brandPreferences: string,
        competitorBrands: string,
        differenceFromCompetitor: string,
        customerBrandFeeling: string,
        customerBrandThoughts: string,
        customerBrandAct: string,
        budget: Number,
        timeframe: Date,
        pointOfContact: string,
        activityDates: string,
        activityDatesBudget: Number,
        accessToAnalyticsAndPaidMediaAccounts: boolean,
        channelSelection: [string],
        channelGoals: string,
        taggingForTracking: string,
        thirdPartyToolsAndApplications: string,
        locationTargeting: string,
        emailDatabaseLists: boolean,
        brandUSP: string,
        brandExperience: string,
        painPoints: string,
        customerGroups: string,
        exclusiveOffers: string,
        customerRetention: string,
        additionalInformation: string
    },
}

const jobFormSchema: Schema = new Schema({
    job: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'job',
        required: true
    },
    paidMediaBrief: {
        email: String,
        brandName: String,
        brandWebsite: String,
        companyBackground: String,
        brandValues: String,
        brandPropositionToCustomers: String,
        brandGoals: String,
        paidMediaGoals: String,
        toneOfVoice: String,
        customerValue: String,
        audienceIdentity: String,
        audienceAge: Number,
        ineterestsAndHobbies: String,
        audienceTargeting: [String],
        informationConsumption: String,
        publicIdentity: String,
        brandPreferences: String,
        competitorBrands: String,
        differenceFromCompetitor: String,
        customerBrandFeeling: String,
        customerBrandThoughts: String,
        customerBrandAct: String,
        budget: Number,
        timeframe: Date,
        pointOfContact: String,
        activityDates: String,
        activityDatesBudget: Number,
        accessToAnalyticsAndPaidMediaAccounts: {
            type: Boolean,
            default: false
        },
        channelSelection: [String],
        channelGoals: String,
        taggingForTracking: String,
        thirdPartyToolsAndApplications: String,
        locationTargeting: String,
        emailDatabaseLists: {
            type: Boolean,
            default: false
        },
        brandUSP: String,
        brandExperience: String,
        painPoints: String,
        customerGroups: String,
        exclusiveOffers: String,
        customerRetention: String,
        additionalInformation: String
    },
})